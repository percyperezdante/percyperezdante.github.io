<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on Home</title>
    <link>http://example.org/notes/</link>
    <description>Recent content in Notes on Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Mar 2020 16:45:20 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vim</title>
      <link>http://example.org/notes/vim/</link>
      <pubDate>Sat, 08 May 2021 18:34:11 +0100</pubDate>
      
      <guid>http://example.org/notes/vim/</guid>
      <description>Vim with Netwr let g:netrw_banner = 0 let g:netrw_liststyle = 3 let g:netrw_browse_split = 4 let g:netrw_altv = 1 let g:netrw_winsize = 25 augroup ProjectDrawer autocmd! autocmd VimEnter * :Vexplore augroup END ---	-----------------	---- Map	Quick Explanation	Link ---	-----------------	---- &amp;lt;F1&amp;gt;	Causes Netrw to issue help &amp;lt;cr&amp;gt;	Netrw will enter the directory or read the file |netrw-cr| &amp;lt;del&amp;gt;	Netrw will attempt to remove the file/directory |netrw-del| -	Makes Netrw go up one directory |netrw--| a	Toggles between normal display, |netrw-a| hiding (suppress display of files matching g:netrw_list_hide) showing (display only files which match g:netrw_list_hide) c	Make browsing directory the current directory |netrw-c| C	Setting the editing window |netrw-C| d	Make a directory |netrw-d| D	Attempt to remove the file(s)/directory(ies) |netrw-D| gb	Go to previous bookmarked directory |netrw-gb| gh	Quick hide/unhide of dot-files |netrw-gh| &amp;lt;c-h&amp;gt;	Edit file hiding list |netrw-ctrl-h| i	Cycle between thin, long, wide, and tree listings |netrw-i| &amp;lt;c-l&amp;gt;	Causes Netrw to refresh the directory listing |netrw-ctrl-l| mb	Bookmark current directory |netrw-mb| mc	Copy marked files to marked-file target directory |netrw-mc| md	Apply diff to marked files (up to 3) |netrw-md| me	Place marked files on arg list and edit them |netrw-me| mf	Mark a file |netrw-mf| mh	Toggle marked file suffices&amp;#39; presence on hiding list |netrw-mh| mm	Move marked files to marked-file target directory |netrw-mm| mp	Print marked files |netrw-mp| mr	Mark files satisfying a shell-style |regexp| |netrw-mr| mt	Current browsing directory becomes markfile target |netrw-mt| mT	Apply ctags to marked files |netrw-mT| mu	Unmark all marked files |netrw-mu| mx	Apply arbitrary shell command to marked files |netrw-mx| mz	Compress/decompress marked files |netrw-mz| o	Enter the file/directory under the cursor in a new |netrw-o| browser window.</description>
    </item>
    
    <item>
      <title>MyTools</title>
      <link>http://example.org/notes/mytools/</link>
      <pubDate>Mon, 29 Mar 2021 17:41:58 +0100</pubDate>
      
      <guid>http://example.org/notes/mytools/</guid>
      <description>This page contains the list of tools I used in my laptop. It was used to set a ready-to-use host from IAC.
A. OS I am taking here the case of Ubuntu, but this should work with similar distros of the same family.
B. Tools  Update  $ sudo apt update -y $ sudo apt install git vim -y $ git config --global user.email percyyperezdante@gmail.com </description>
    </item>
    
    <item>
      <title>Ansible</title>
      <link>http://example.org/notes/ansible/</link>
      <pubDate>Sat, 16 Jan 2021 15:49:01 +0000</pubDate>
      
      <guid>http://example.org/notes/ansible/</guid>
      <description>General Ansible cnetralizes model:
  Adhoc example:
$ ansible -m copy -a &amp;#34;src=orignalFile.txt dest=finalFile.txt&amp;#34; --check --diff localhost Where
 Check = to run in dry mode Diff = Shows the difference before and after apply ansible &amp;ldquo;copy&amp;rdquo; is a module, list of all ansible modules in here &amp;ldquo;m&amp;rdquo; module name &amp;ldquo;a&amp;rdquo; arguments  More examples   Playbook   A playbook uses a Yaml file as main place to read from.</description>
    </item>
    
    <item>
      <title>Restful</title>
      <link>http://example.org/notes/restful/</link>
      <pubDate>Wed, 09 Sep 2020 09:35:37 +0100</pubDate>
      
      <guid>http://example.org/notes/restful/</guid>
      <description>Design tips  URI format:  URI = scheme &amp;quot;://&amp;quot; authority &amp;quot;/&amp;quot; path [ &amp;quot;?&amp;quot; query] [&amp;quot;#&amp;quot; fragment&amp;quot;] URI = http://myserver.com/mypath?query=1#document   General rules for URI formating:
 A forward slash / is used to indicate a hierarchical relationship between resources A trailing forward slash / should not be included in URIs Hyphens - should be used to improve readability Underscores _ should not be used in URIs Lowercase lette    URI path design</description>
    </item>
    
    <item>
      <title>Jfrog</title>
      <link>http://example.org/notes/jfrog/</link>
      <pubDate>Thu, 27 Aug 2020 14:09:26 +0100</pubDate>
      
      <guid>http://example.org/notes/jfrog/</guid>
      <description>1. How to install a local Jfrog (open source) The following shows how to install a local Jfrog (OSS) in a Linux-base host.
 Open https://jfrog.com/open-source/#artifactory Select the OS you are working with: Linux, Windows or Mac and click on &amp;ldquo;Click here to Download&amp;rdquo;  In our case we could directly download the tar file for Linux:
$ mkdir myJfrog $ cd myJfrog $ wget https://api.bintray.com/content/jfrog/artifactory/org/artifactory/oss/jfrog-artifactory-oss/$latest/jfrog-artifactory-oss-$latest-linux.tar.gz?bt_package=jfrog-artifactory-oss $ ls -tlr total 811768 -rw-rw-r-- 1 percy percy 831242240 Aug 26 17:28 jfrog-artifactory-oss-7.</description>
    </item>
    
    <item>
      <title>Crypto</title>
      <link>http://example.org/notes/crypto/</link>
      <pubDate>Tue, 16 Jun 2020 22:11:31 +0100</pubDate>
      
      <guid>http://example.org/notes/crypto/</guid>
      <description>General  DES; The Data Encryption Standard uses a key of 56bits and a block size of 64 buts. It is not recommended, and insted you can consider other approaches such as AES, Salsa20.:w   </description>
    </item>
    
    <item>
      <title>Shell</title>
      <link>http://example.org/notes/shell/</link>
      <pubDate>Thu, 21 May 2020 11:52:12 +0100</pubDate>
      
      <guid>http://example.org/notes/shell/</guid>
      <description>1. Sending message to pts terminal # List of opened terminals. percy@prec:~$ ls -tlr /dev/pts/ total 0 c--------- 1 root root 5, 2 May 21 06:18 ptmx crw--w---- 1 percy tty 136, 2 May 21 11:36 2 crw--w---- 1 percy tty 136, 0 May 21 11:52 0 crw--w---- 1 percy tty 136, 3 May 21 11:53 3 crw--w---- 1 percy tty 136, 4 May 21 11:53 4 crw--w---- 1 percy tty 136, 6 May 21 11:53 6 crw--w---- 1 percy tty 136, 5 May 21 11:53 5 percy@prec:~$ echo &amp;#34;How are you ?</description>
    </item>
    
    <item>
      <title>Kubernetes</title>
      <link>http://example.org/notes/kubernetes/</link>
      <pubDate>Wed, 13 May 2020 15:12:41 +0100</pubDate>
      
      <guid>http://example.org/notes/kubernetes/</guid>
      <description>Reference The following notes were extracted, adjusted or extended from the following references.
 Kubernetes book by Nigel Poulton Kubernetes setup  Kubernetes the hard way Kubernetes network administraion  Google Kubernetes Engine: GKE docs AWS Elastic Container Service for Kubernetes EKS Kubectl docs  General   Kubernetes is a container orchestrator, which means to maintain, manage and support container that run applications. Kubernetes also manage workload placement, it offers an infrastructure abstraction and maintains a desire state of the infrastructure.</description>
    </item>
    
    <item>
      <title>Go</title>
      <link>http://example.org/notes/go/</link>
      <pubDate>Mon, 11 May 2020 11:04:57 +0100</pubDate>
      
      <guid>http://example.org/notes/go/</guid>
      <description>References The following notes were extracted, adjusted or extended from the following references.
 Go mastering by Mihalis Tsoukalos  General 1. Go inserts only a semicolon at the end of a &amp;ldquo;{&amp;quot;
func main() { // &amp;lt;-- this will trigger error .... } func main(){ // &amp;lt;-- this will NOT trigger error .... } 2. Install and clean packages
$ go get -v github.com/mastsoud/go/package_name ..... $ go clean -i -v -x package_name $ rm -rf ~/go/src/github.</description>
    </item>
    
  </channel>
</rss>